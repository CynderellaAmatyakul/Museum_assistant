import os
import re
from dotenv import load_dotenv
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.schema import Document

load_dotenv()

TXT_DIR = "database"
DB_SAVE_PATH = "database/vector_store"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def clean_text(text: str) -> str:
    text = re.sub(r'([‡∏Å-‡πô])\s(?=[‡∏Å-‡πô‡πà-‡πã])', r'\1', text)     # ‡∏û ‡∏¥ ‚Üí ‡∏û‡∏¥
    text = re.sub(r'\s([‡πà-‡πã])', r'\1', text)                 # ‡∏≤ ‡πà ‚Üí ‡∏≤‡πà
    text = re.sub(r'([‡πÄ‡πÅ‡πÇ‡πÉ‡πÑ])\s', r'\1', text)              # ‡πÄ ‡∏û ‚Üí ‡πÄ‡∏û
    text = re.sub(r'\s+', ' ', text)                        # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥
    return text.strip()

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .txt ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
def load_all_txts(txt_dir: str) -> list[Document]:
    documents = []
    for filename in os.listdir(txt_dir):
        if filename.endswith(".txt"):
            path = os.path.join(txt_dir, filename)
            with open(path, encoding="utf-8") as f:
                raw_text = f.read()
                cleaned = clean_text(raw_text)
                documents.append(Document(
                    page_content=cleaned,
                    metadata={"source": path}
                ))
    return documents

# ‚úÖ Split ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥ FAISS Vector Store
def build_vector_store():
    print("üìÑ Loading .txt files...")
    raw_documents = load_all_txts(TXT_DIR)

    print("‚úÇÔ∏è Splitting texts...")
    splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    split_docs = splitter.split_documents(raw_documents)

    print("üß† Generating embeddings...")
    embeddings = OpenAIEmbeddings()

    print("üì¶ Building vector DB with FAISS...")
    vector_db = FAISS.from_documents(split_docs, embeddings)
    vector_db.save_local(DB_SAVE_PATH)
    print("‚úÖ Vector DB saved to:", DB_SAVE_PATH)

if __name__ == "__main__":
    build_vector_store()